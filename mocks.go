// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package aeolic

import (
	"io"
	"net/http"
	"sync"
)

// Ensure, that httpClientMock does implement httpClient.
// If this is not the case, regenerate this file with moq.
var _ httpClient = &httpClientMock{}

// httpClientMock is a mock implementation of httpClient.
//
//	func TestSomethingThatUseshttpClient(t *testing.T) {
//
//		// make and configure a mocked httpClient
//		mockedhttpClient := &httpClientMock{
//			DoFunc: func(req *http.Request) (*http.Response, error) {
//				panic("mock out the Do method")
//			},
//			GetFunc: func(url string) (*http.Response, error) {
//				panic("mock out the Get method")
//			},
//			PostFunc: func(url string, contentType string, body io.Reader) (*http.Response, error) {
//				panic("mock out the Post method")
//			},
//		}
//
//		// use mockedhttpClient in code that requires httpClient
//		// and then make assertions.
//
//	}
type httpClientMock struct {
	// DoFunc mocks the Do method.
	DoFunc func(req *http.Request) (*http.Response, error)

	// GetFunc mocks the Get method.
	GetFunc func(url string) (*http.Response, error)

	// PostFunc mocks the Post method.
	PostFunc func(url string, contentType string, body io.Reader) (*http.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// Req is the req argument value.
			Req *http.Request
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// URL is the url argument value.
			URL string
		}
		// Post holds details about calls to the Post method.
		Post []struct {
			// URL is the url argument value.
			URL string
			// ContentType is the contentType argument value.
			ContentType string
			// Body is the body argument value.
			Body io.Reader
		}
	}
	lockDo   sync.RWMutex
	lockGet  sync.RWMutex
	lockPost sync.RWMutex
}

// Do calls DoFunc.
func (mock *httpClientMock) Do(req *http.Request) (*http.Response, error) {
	if mock.DoFunc == nil {
		panic("httpClientMock.DoFunc: method is nil but httpClient.Do was just called")
	}
	callInfo := struct {
		Req *http.Request
	}{
		Req: req,
	}
	mock.lockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	mock.lockDo.Unlock()
	return mock.DoFunc(req)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//
//	len(mockedhttpClient.DoCalls())
func (mock *httpClientMock) DoCalls() []struct {
	Req *http.Request
} {
	var calls []struct {
		Req *http.Request
	}
	mock.lockDo.RLock()
	calls = mock.calls.Do
	mock.lockDo.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *httpClientMock) Get(url string) (*http.Response, error) {
	if mock.GetFunc == nil {
		panic("httpClientMock.GetFunc: method is nil but httpClient.Get was just called")
	}
	callInfo := struct {
		URL string
	}{
		URL: url,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(url)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedhttpClient.GetCalls())
func (mock *httpClientMock) GetCalls() []struct {
	URL string
} {
	var calls []struct {
		URL string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Post calls PostFunc.
func (mock *httpClientMock) Post(url string, contentType string, body io.Reader) (*http.Response, error) {
	if mock.PostFunc == nil {
		panic("httpClientMock.PostFunc: method is nil but httpClient.Post was just called")
	}
	callInfo := struct {
		URL         string
		ContentType string
		Body        io.Reader
	}{
		URL:         url,
		ContentType: contentType,
		Body:        body,
	}
	mock.lockPost.Lock()
	mock.calls.Post = append(mock.calls.Post, callInfo)
	mock.lockPost.Unlock()
	return mock.PostFunc(url, contentType, body)
}

// PostCalls gets all the calls that were made to Post.
// Check the length with:
//
//	len(mockedhttpClient.PostCalls())
func (mock *httpClientMock) PostCalls() []struct {
	URL         string
	ContentType string
	Body        io.Reader
} {
	var calls []struct {
		URL         string
		ContentType string
		Body        io.Reader
	}
	mock.lockPost.RLock()
	calls = mock.calls.Post
	mock.lockPost.RUnlock()
	return calls
}
